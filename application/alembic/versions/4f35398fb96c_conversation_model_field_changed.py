"""conversation_model_field_changed

Revision ID: 4f35398fb96c
Revises: 26a38b61e00a
Create Date: 2023-08-03 11:29:12.795526

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "4f35398fb96c"
down_revision = "26a38b61e00a"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "langchain_pg_embedding_collection_id_fkey",
        "langchain_pg_embedding",
        type_="foreignkey",
    )
    op.drop_table("langchain_pg_collection")
    op.drop_table("langchain_pg_embedding")
    op.drop_index("ix_conference_objectID", table_name="conference")
    op.drop_table("conference")
    op.add_column("conversation", sa.Column("user_id", sa.UUID(), nullable=False))
    op.drop_constraint("conversation_userId_fkey", "conversation", type_="foreignkey")
    op.create_foreign_key(None, "conversation", "user", ["user_id"], ["id"])
    op.drop_column("conversation", "userId")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE EXTENSION IF NOT EXISTS vector;")                                                                
    op.add_column(
        "conversation",
        sa.Column("userId", sa.UUID(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "conversation", type_="foreignkey")
    op.create_foreign_key(
        "conversation_userId_fkey", "conversation", "user", ["userId"], ["id"]
    )
    op.drop_column("conversation", "user_id")
    op.create_table(
        "conference",
        sa.Column("title", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "objectID", sa.VARCHAR(length=10), autoincrement=False, nullable=False
        ),
        sa.Column("summary", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("conference_info", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "location", sa.VARCHAR(length=300), autoincrement=False, nullable=True
        ),
        sa.Column("primary_product", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("secondary_product", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "conference_source",
            sa.VARCHAR(length=10),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "conference_full_details", sa.TEXT(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "conference_url", sa.VARCHAR(length=500), autoincrement=False, nullable=True
        ),
        sa.Column("date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("primary_author", sa.TEXT(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("objectID", name="conference_pkey"),
    )
    op.create_index("ix_conference_objectID", "conference", ["objectID"], unique=False)
    op.create_table(
        "langchain_pg_embedding",
        sa.Column("collection_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("embedding", sa.NullType(), autoincrement=False, nullable=True),
        sa.Column("document", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "cmetadata",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("custom_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["collection_id"],
            ["langchain_pg_collection.uuid"],
            name="langchain_pg_embedding_collection_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("uuid", name="langchain_pg_embedding_pkey"),
    )
    op.create_table(
        "langchain_pg_collection",
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "cmetadata",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("uuid", name="langchain_pg_collection_pkey"),
    )
    # ### end Alembic commands ###
